<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Expanding Hierarchy Graph with D3.js">
    <title>Force Directed Graph</title>
    <script src="js/d3/d3.v7.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f8f9fa;
        }
    </style>
</head>
<body>
<div id="chart"></div>
<script>
    const data = {
        "name": "Equipment",
        "children": [
            {
                "name": "Vehicle",
                "children": [
                    {
                        "name": "Airborne Vehicle",
                        "children": [
                            {
                                "name": "Fixed-wing",
                                "children": [
                                    {
                                        "name": "Fighter Jet",
                                        "children": [
                                            { "name": "Stealth Fighter", "value": 50.0 },
                                            { "name": "Interceptor", "value": 50.0 }
                                        ]
                                    },
                                    { "name": "Bomber Jet", "value": 16.67 },
                                    { "name": "Attack Jet", "value": 16.67 },
                                    { "name": "Drone", "value": 16.67 },
                                    { "name": "Cargo Jet", "value": 16.67 },
                                    {
                                        "name": "Passenger Jet",
                                        "children": [
                                            { "name": "Private Jet", "value": 50.0 },
                                            { "name": "Regional Jet", "value": 50.0 }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "Rotary-wing",
                                "children": [
                                    {
                                        "name": "Helicopter",
                                        "children": [
                                            { "name": "Rescue Helicopter", "value": 33.33 },
                                            { "name": "Cargo Helicopter", "value": 33.33 },
                                            { "name": "Attack Helicopter", "value": 33.33 }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "Ground Vehicle",
                        "children": [
                            { "name": "Wheel-based", "value": 33.33 },
                            {
                                "name": "Tread-based",
                                "children": [
                                    {
                                        "name": "Tank",
                                        "children": [
                                            { "name": "Light Tank", "value": 50.0 },
                                            { "name": "Heavy Tank", "value": 50.0 }
                                        ]
                                    },
                                    {
                                        "name": "APC",
                                        "children": [
                                            { "name": "Amphibious APC", "value": 100.0 }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "Air-Cushioned",
                                "children": [
                                    {
                                        "name": "Amphibious Vehicle",
                                        "children": [
                                            { "name": "Hovercraft", "value": 100.0 }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "Maritime Vehicle",
                        "children": [
                            {
                                "name": "Submarine",
                                "children": [
                                    { "name": "Missile Submarine", "value": 100.0 }
                                ]
                            },
                            {
                                "name": "Destroyer",
                                "children": [
                                    { "name": "Patrol Boat", "value": 50.0 },
                                    { "name": "Battleship", "value": 50.0 }
                                ]
                            },
                            {
                                "name": "Cruiser",
                                "children": [
                                    { "name": "Cruise Ship", "value": 50.0 },
                                    { "name": "Luxury Yacht", "value": 50.0 }
                                ]
                            },
                            { "name": "Jet Ski", "value": 20.0 },
                            { "name": "Fishing Boat", "value": 20.0 }
                        ]
                    }
                ]
            }
        ]
    }

    // Specify the charts’ dimensions. The height is variable, depending on the layout.
    const width = window.screen.width;
    const marginTop = 100;
    const marginRight = 100;
    const marginBottom = 100;
    const marginLeft = 100;

    // Rows are separated by dx pixels, columns by dy pixels. These names can be counter-intuitive
    // (dx is a height, and dy a width). This because the tree must be viewed with the root at the
    // “bottom”, in the data domain. The width of a column is based on the tree’s height.
    const root = d3.hierarchy(data);
    const dx = 10;
    const dy = (width - marginRight - marginLeft) / (1 + root.height);

    // Define the tree layout and the shape for links.
    const tree = d3.tree().nodeSize([dx, dy]);
    const diagonal = d3.linkHorizontal().x(d => d.y).y(d => d.x);
    
    
    // Create the SVG container, a layer for the links and a layer for the nodes.
    const svg = d3.select("#chart").append("svg")
        .attr("width", width)
        .attr("height", dx)
        .attr("viewBox", [-marginLeft, -marginTop, width, dx])
        .attr("style", "max-width: 100%; height: auto; font: 10px sans-serif; user-select: none;");

    
    
    const gLink = svg.append("g")
        .attr("fill", "none")
        .attr("stroke", "#555")
        .attr("stroke-opacity", 0.4)
        .attr("stroke-width", 1.5);

    const gNode = svg.append("g")
        .attr("cursor", "pointer")
        .attr("pointer-events", "all");

    function update(event, source) {
        const duration = event?.altKey ? 2500 : 250; // hold the alt key to slow down the transition
        const nodes = root.descendants().reverse();
        const links = root.links();

        // Compute the new tree layout.
        tree(root);

        let left = root;
        let right = root;
        root.eachBefore(node => {
            if (node.x < left.x) left = node;
            if (node.x > right.x) right = node;
        });

        const height = right.x - left.x + marginTop + marginBottom;

        const transition = svg.transition()
            .duration(duration)
            .attr("height", height)
            .attr("viewBox", [-marginLeft, left.x - marginTop, width, height])
            .tween("resize", window.ResizeObserver ? null : () => () => svg.dispatch("toggle"));

        // Update the nodes…
        const node = gNode.selectAll("g")
            .data(nodes, d => d.id);

        // Enter any new nodes at the parent's previous position.
        const nodeEnter = node.enter().append("g")
            .attr("transform", d => `translate(${source.y0},${source.x0})`)
            .attr("fill-opacity", 0)
            .attr("stroke-opacity", 0)
            .on("click", (event, d) => {
                d.children = d.children ? null : d._children;
                update(event, d);
            });

        nodeEnter.append("circle")
            .attr("r", 2.5)
            .attr("fill", d => d._children ? "#555" : "#999")
            .attr("stroke-width", 10);

        nodeEnter.append("text")
            .attr("dy", "0.31em")
            .attr("x", d => d._children ? -6 : 6)
            .attr("text-anchor", d => d._children ? "end" : "start")
            .text(d => d.data.name)
            .attr("stroke-linejoin", "round")
            .attr("stroke-width", 3)
            .attr("stroke", "white")
            .attr("paint-order", "stroke");

        // Transition nodes to their new position.
        const nodeUpdate = node.merge(nodeEnter).transition(transition)
            .attr("transform", d => `translate(${d.y},${d.x})`)
            .attr("fill-opacity", 1)
            .attr("stroke-opacity", 1);

        // Transition exiting nodes to the parent's new position.
        const nodeExit = node.exit().transition(transition).remove()
            .attr("transform", d => `translate(${source.y},${source.x})`)
            .attr("fill-opacity", 0)
            .attr("stroke-opacity", 0);

        // Update the links…
        const link = gLink.selectAll("path")
            .data(links, d => d.target.id);

        // Enter any new links at the parent's previous position.
        const linkEnter = link.enter().append("path")
            .attr("d", d => {
                const o = {x: source.x0, y: source.y0};
                return diagonal({source: o, target: o});
            });

        // Transition links to their new position.
        link.merge(linkEnter).transition(transition)
            .attr("d", diagonal);

        // Transition exiting nodes to the parent's new position.
        link.exit().transition(transition).remove()
            .attr("d", d => {
                const o = {x: source.x, y: source.y};
                return diagonal({source: o, target: o});
            });

        // Stash the old positions for transition.
        root.eachBefore(d => {
            d.x0 = d.x;
            d.y0 = d.y;
        });
    }

    // Do the first update to the initial configuration of the tree — where a number of nodes
    // are open (arbitrarily selected as the root, plus nodes with 7 letters).
    root.x0 = dy / 2;
    root.y0 = 0;
    root.descendants().forEach((d, i) => {
        d.id = i;
        d._children = d.children;
        if (d.depth && d.data.name.length !== 7) d.children = null;
    });

    update(null, root);
</script>

</body>
</html>